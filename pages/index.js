import { useEffect, useState } from 'react';
import Head from 'next/head';
import { useViewerConnection, EthereumAuthProvider, useViewerRecord } from '@self.id/framework';
import styles from '../styles/Home.module.css';

export default function Home() {
  const [connection, connect, disconnect] = useViewerConnection();
  const record = useViewerRecord('basicProfile');
  const [profile, setProfile] = useState({});

  const handleConnect = async () => {
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts',
    });
    const ethereumAuthProvider = new EthereumAuthProvider(window.ethereum, accounts[0]);
    await connect(ethereumAuthProvider);
  };

  const handleSaveViewerRecord = () => record.merge(profile).then(() => alert('Profile Saved'));

  const handleProfileInputChange = (event) => setProfile({ ...profile, [event.target.name]: event.target.value });

  useEffect(() => {
    if (record) {
      setProfile(record.content);
    }
  }, [connection]);

  return (
    <div className={styles.container}>
      <Head>
        <title>____.ID</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Be Your Self</h1>
        <h2>With Self.ID</h2>
        {
          connection.status === 'connected' ? (
            <>
              {/* show user profile: name, bio, location */}
              <div className={styles.profileContainer}>
                <h3>Profile</h3>
                <input type="text" name="name" value={profile?.name} placeholder="Enter Name" onChange={handleProfileInputChange} />
                <input type="text" name="bio" value={profile?.bio} placeholder="Your Bio" onChange={handleProfileInputChange} />
                <input type="text" name="country" value={profile?.country} placeholder="Your Location" onChange={handleProfileInputChange} />
                <button className={styles.button} onClick={handleSaveViewerRecord}>Save</button>
              </div>
              <button
                className={styles.button}
                onClick={() => {
                  disconnect();
                }}>
                Disconnect ({connection.selfID.id.slice(0, 10) + '...' + connection.selfID.id.slice(-10)})
              </button>
            </>
          ) : typeof window !== "undefined" ? (
            <button
              className={styles.button}
              disabled={connection.status === 'connecting'}
              onClick={handleConnect}>
              Connect Wallet
            </button>
          ) : (
            <p>
              An injected Ethereum provider such as{' '}
              <a href="https://metamask.io/">MetaMask</a> is needed to authenticate.
            </p>
          )
        }
      </main>

      <footer className={styles.footer}>
        {/* add copy symbol */}
        <a href="https://github.com/Salmandabbakuti" target="_blank" rel="noopener noreferrer">
          Â© 2022 Salman Dabbakuti. Powered by Self.ID, Ceramic Network
        </a>
      </footer>
    </div>
  );
};
